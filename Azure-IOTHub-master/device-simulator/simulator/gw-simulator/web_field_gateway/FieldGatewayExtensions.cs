// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using IOTGateway;
using IOTGateway.Models;
using Microsoft.Rest;

namespace IOTGateway
{
    public static partial class FieldGatewayExtensions
    {
        /// <param name='operations'>
        /// Reference to the IOTGateway.IFieldGateway.
        /// </param>
        /// <param name='deviceId'>
        /// Required.
        /// </param>
        public static string ReceiveCommandByDeviceid(this IFieldGateway operations, string deviceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFieldGateway)s).ReceiveCommandByDeviceidAsync(deviceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the IOTGateway.IFieldGateway.
        /// </param>
        /// <param name='deviceId'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> ReceiveCommandByDeviceidAsync(this IFieldGateway operations, string deviceId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.ReceiveCommandByDeviceidWithOperationResponseAsync(deviceId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the IOTGateway.IFieldGateway.
        /// </param>
        /// <param name='deviceId'>
        /// Required.
        /// </param>
        public static string RegisterByDeviceid(this IFieldGateway operations, string deviceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFieldGateway)s).RegisterByDeviceidAsync(deviceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the IOTGateway.IFieldGateway.
        /// </param>
        /// <param name='deviceId'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> RegisterByDeviceidAsync(this IFieldGateway operations, string deviceId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.RegisterByDeviceidWithOperationResponseAsync(deviceId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the IOTGateway.IFieldGateway.
        /// </param>
        /// <param name='telemetry'>
        /// Required.
        /// </param>
        public static object SendTelemetryByTelemetry(this IFieldGateway operations, TelemetryData telemetry)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFieldGateway)s).SendTelemetryByTelemetryAsync(telemetry);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the IOTGateway.IFieldGateway.
        /// </param>
        /// <param name='telemetry'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> SendTelemetryByTelemetryAsync(this IFieldGateway operations, TelemetryData telemetry, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.SendTelemetryByTelemetryWithOperationResponseAsync(telemetry, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the IOTGateway.IFieldGateway.
        /// </param>
        /// <param name='deviceId'>
        /// Required.
        /// </param>
        public static object UnregisterByDeviceid(this IFieldGateway operations, string deviceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFieldGateway)s).UnregisterByDeviceidAsync(deviceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the IOTGateway.IFieldGateway.
        /// </param>
        /// <param name='deviceId'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> UnregisterByDeviceidAsync(this IFieldGateway operations, string deviceId, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.UnregisterByDeviceidWithOperationResponseAsync(deviceId, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
