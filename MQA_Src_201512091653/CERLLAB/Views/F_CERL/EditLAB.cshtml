@model CERLLAB.Models.FnGetFCERL_Result
@using CERLLAB.Controllers.General
@{
    string PartialFormAction = "PartialFormAction";
    string PartialTaskDetail = "PartialTaskDetail";

    ViewBag.Title = "Edit";
    string PartialAttachFileEdit = "PartialAttachFileEdit";
    string PartialAttachFile = "PartialAttachFile";
    string PartialCCUserEdit = "PartialCCUserEdit";
    string website = Constant.S_WebSite;
    string web = website + "/F_CERL/";
}
<script type="text/javascript">
    $(document).ready(function () {
        $('#tabs').tabs();
        $("#NextTestDate").datepicker({
            dateFormat: "yy/mm/dd",
            regional: "zh-TW",
            showAnim: "drop"
        });
        $("#ReceiptDate").datepicker({
            dateFormat: "yy/mm/dd",
            regional: "zh-TW",
            showAnim: "drop"
        });
        $("#FinishDate").datepicker({
            dateFormat: "yy/mm/dd",
            regional: "zh-TW",
            showAnim: "drop"
        });
    });

    $(function () {
        $("#Site").change(function () {
            var selectedItem = $(this).val();
            var ddlTestItem = $("#TestItem");
            var ddlRequestItem = $("#RequestItem");
            var ddlLabMember = $("#LabMember");
            ddlTestItem.html('');
            ddlRequestItem.html('');
            ddlLabMember.html('');
            $.ajax({
                cache: false,
                type: "GET",
                url: "@web" + "GetTestItemMenu",
                data: { root: selectedItem, iWhere: 1 },
                success: function (data) {
                    $.each(data, function (i, item) {
                        ddlTestItem.append($('<option/>', {
                            value: item.Id,
                            text: item.Name
                        }));
                    });

                    $("#TestItem").change();
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve test item menu.');
                }
            });
        });
    });

    $(function () {
        $("#TestItem").change(function () {
            var selectedItem = $(this).val();
            var ddlRequestItem = $("#RequestItem");
            var ddlLocalSupervisor = $("#LocalSupervisor");
            var ddlLabMember = $("#LabMember");

            ddlRequestItem.html('');
            ddlLocalSupervisor.html('');
            ddlLabMember.html('');

            $.ajax({
                cache: false,
                type: "GET",
                url: "@web" + "GetTestItemMenu",
                data: { root: selectedItem, iWhere: 0 },
                success: function (data) {
                    $.each(data, function (i, item) {
                        ddlRequestItem.append($('<option/>', {
                            value: item.Id,
                            text: item.Name
                        }));
                    });
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve test item menu.');
                }
            });

            $.ajax({
                cache: false,
                type: "GET",
                url: "@web" + "GetLocalSupervisor",
                data: { root: selectedItem },
                success: function (data) {
                    $.each(data, function (i, item) {
                        ddlLocalSupervisor.append($('<option/>', {
                            value: item.Id,
                            text: item.Name
                        }));
                    });
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve test item menu.');
                }
            });

            $.ajax({
                cache: false,
                type: "GET",
                url: "@web" + "GetLabMember",
                data: { root: selectedItem },
                success: function (data) {
                    $.each(data, function (i, item) {
                        ddlLabMember.append($('<option/>', {
                            value: item.Id,
                            text: item.Name
                        }));
                    });
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve test item menu.');
                }
            });

            $.ajax({
                cache: false,
                type: "GET",
                url: "@web" + "GetDivShow",
                data: { root: selectedItem },
                success: function (data) {
                    var IdvShowArray = data.split("|");
                    if (IdvShowArray.indexOf("EFA") != -1) {
                        $("#EFA").show();

                        var ddlReturnType = $("#ReturnType");
                        ddlReturnType.change();
                    }
                    else {
                        $("#EFA").hide();
                    }

                    if (IdvShowArray.indexOf("Descr") != -1) {
                        $("#Descr").show();
                    }
                    else {
                        $("#Descr").hide();
                    }

                    if (IdvShowArray.indexOf("Source") != -1) {
                        $("#Source").show();
                    }
                    else {
                        $("#Source").hide();
                    }

                    if (IdvShowArray.indexOf("FA") != -1) {
                        $("#FA").show();
                    }
                    else {
                        $("#FA").hide();
                    }

                    if (IdvShowArray.indexOf("Strain") != -1) {
                        $("#Strain").show();
                        $("#StrainNextTestDate").show();
                    }
                    else {
                        $("#Strain").hide();
                        $("#StrainNextTestDate").hide();
                    }
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve test item menu.');
                }
            });
        });
    });

    $(function () {
        $("#ReturnType").change(function () {
            var selectedItem = $(this).val();
            var ddlFailureSite = $("#FailureSite");
            ddlFailureSite.html('');
            $.ajax({
                cache: false,
                type: "GET",
                url: "@web" + "GetReturnSite",
                data: { iWhere: selectedItem },
                success: function (data) {
                    $.each(data, function (i, item) {

                        ddlFailureSite.append($('<option/>', {
                            value: item.Id,
                            text: item.Name
                        }));
                    });
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve test item menu.');
                }
            });
        });

        $("#CustomerID").change(function () {
            var selectedItem = $(this).val();
            var ddlProductStage = $("#ProductStageID");
            ddlProductStage.html('');
            $.ajax({
                cache: false,
                type: "GET",
                url: "@web" + "GetProductStage",
                data: { iWhere: selectedItem },
                success: function (data) {
                    $.each(data, function (i, item) {
                        ddlProductStage.append($('<option/>', {
                            value: item.Id,
                            text: item.Name
                        }));
                    });
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve ProductStage item menu.');
                }
            });
        });
    });
</script>
<div id="tabs">
    <ul>
        <li><a href="#tabs-1">申請單</a></li>
        <li><a href="#tabs-2">@Html.LabelFor(model => model.Comment)</a></li>
        <li><a href="#tabs-3">簽核記錄</a></li>
    </ul>

    @using (Html.BeginForm("EditLAB", "F_CERL", FormMethod.Post, new { enctype = "multipart/form-data", name = "fcerl", id = "fcerl" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        <div id="tabs-1">
            @if (ViewData["FormAction"] != null)
            {
                @Html.Partial(PartialFormAction, ViewData["FormAction"])
            }

            <fieldset>
                <legend>f_cerl</legend>
                @Html.HiddenFor(model => model.ID)
                @Html.HiddenFor(model => model.State)
                @Html.HiddenFor(model => model.fID)
                @Html.HiddenFor(model => model.cdt)
                @Html.HiddenFor(model => model.udt)
                @Html.HiddenFor(model => model.FormCode)
                @Html.HiddenFor(model => model.FlowCode)
                @Html.HiddenFor(model => model.ListAssignTo)

                <div>
                    <table class="jtable" style="table-layout: fixed;">
                        <tr>
                            <th class="display-label">
                                <label>申請人填寫：</label>
                            </th>
                        </tr>
                    </table>
                    <table class="jtable" style="table-layout: fixed; display: @Method.GetDisplay(Html.ValueFor(model => model.Supervisor_Visible).ToString())">
                        <tr>
                            <th class="display-label" width="15%">@Html.LabelFor(model => model.State)</th>
                            <td class="display-field" width="35%">@Html.ValueFor(model => model.State)</td>
                            <th class="editor-label" width="15%">@Html.LabelFor(model => model.Supervisor)</th>
                            <td class="editor-field" width="35%">
                                @if (@Html.ValueFor(model => model.Supervisor_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.DropDownListFor(model => model.Supervisor, (SelectList)ViewData["SupervisorList"])
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.Supervisor)
                                    @Html.ValueFor(model => model.SupervisorName)
                                }
                                @Html.ValidationMessageFor(model => model.Supervisor)
                            </td>
                        </tr>
                    </table>
                    <table class="jtable" style="table-layout: fixed;">
                        <tr>
                            <th class="display-label" width="15%">
                                @Html.LabelFor(model => model.UID)
                            </th>
                            <td class="display-field" width="35%">
                                @Html.ValueFor(model => model.UID)
                                @Html.HiddenFor(model => model.UID)
                                @Html.ValidationMessageFor(model => model.UID)
                            </td>
                            <th class="display-label" width="15%">
                                @Html.LabelFor(model => model.CaseID)
                            </th>
                            <td class="display-field" width="35%">
                                @Html.ValueFor(model => model.CaseID)
                                @Html.HiddenFor(model => model.CaseID)
                                @Html.ValidationMessageFor(model => model.CaseID)
                            </td>
                        </tr>
                    </table>
                    <table class="jtable" style="table-layout: fixed;">
                        <tr>
                            <th class="display-label" width="15%">
                                @Html.LabelFor(model => model.Applicant)
                            </th>
                            <td class="display-field" width="35%">
                                @if (Html.ValueFor(model => model.Applicant_ReadOnly).ToString().ToUpper() == "FALSE")
                                {
                                    @Html.EditorFor(model => model.Applicant)
                                    @Html.ValueFor(model => model.ApplicantName)
                                    @Html.ValidationMessageFor(model => model.Applicant)
                                    <label class="FieldNotValid">@(Session["ValidApplicant"] == null ? "" : Session["ValidApplicant"])</label>
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.Applicant)
                                    @Html.ValueFor(model => model.ApplicantName)
                                }
                            </td>
                            <th class="display-label" width="15%">
                                @Html.LabelFor(model => model.Manager)
                            </th>
                            <td class="display-field" width="35%">
                                @Html.HiddenFor(model => model.Manager)
                                @Html.ValueFor(model => model.ManagerName)
                            </td>
                        </tr>
                    </table>
                    <table class="jtable" style="table-layout: fixed;">
                        <tr>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.Site)
                            </th>
                            <td class="editor-field" width="35%">

                                @if (Html.ValueFor(model => model.Site_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.DropDownListFor(model => model.Site, (SelectList)ViewData["siteList"])
                                    @Html.ValidationMessageFor(model => model.Site)
                                    <label class="FieldNotValid">@(Session["ValidSite"] == null ? "" : Session["ValidSite"])</label>
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.Site)
                                    @Html.ValueFor(model => model.SiteName)
                                }
                            </td>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.TestItem)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.TestItem_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.DropDownListFor(model => model.TestItem, (SelectList)ViewData["testList"])
                                    @Html.ValidationMessageFor(model => model.TestItem)
                                    <label class="FieldNotValid">@(Session["ValidTestItem"] == null ? "" : Session["ValidTestItem"])</label>
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.ParentTestItem)
                                    @Html.HiddenFor(model => model.TestItem)
                                    @Html.ValueFor(model => model.TestItemName)
                                }
                            </td>
                        </tr>
                        <tr>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.RequestItem)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.RequestItem_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.DropDownListFor(model => model.RequestItem, (SelectList)ViewData["requestList"])
                                    @Html.ValidationMessageFor(model => model.RequestItem)
                                    <label class="FieldNotValid">@(Session["ValidRequestItem"] == null ? "" : Session["ValidRequestItem"])</label>
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.RequestItem)
                                    @Html.ValueFor(model => model.RequestItemName)
                                }
                            </td>
                            <td width="50%" colspan="2"></td>
                        </tr>
                    </table>
                    <table class="jtable" style="table-layout: fixed;">
                        <tr>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.CustomerName)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.CustomerID_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.DropDownListFor(model => model.CustomerID, (SelectList)ViewData["CustomerNameList"])
                                    @Html.ValidationMessageFor(model => model.CustomerID)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.CustomerID)
                                    @Html.ValueFor(model => model.CustomerName)
                                }
                            </td>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.ProjectName)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.ProjectName_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.EditorFor(model => model.ProjectName)
                                    @Html.ValidationMessageFor(model => model.ProjectName)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.ProjectName)
                                    @Html.ValueFor(model => model.ProjectName)
                                }
                            </td>
                        </tr>
                    </table>

                    <table class="jtable" style="table-layout: fixed;">
                        <tr>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.SerialNumber)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.SerialNumber_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.TextAreaFor(model => model.SerialNumber, new { cols = 14, @rows = 3, style = "width: 95%" })
                                    @Html.ValidationMessageFor(model => model.SerialNumber)
                                }
                                else
                                {
                                    <span style="white-space: pre-wrap">@Html.ValueFor(model => model.SerialNumber)</span>
                                    @Html.HiddenFor(model => model.SerialNumber)
                                }
                            </td>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.PartNumber)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.PartNumber_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.TextAreaFor(model => model.PartNumber, new { cols = 14, @rows = 3, style = "width: 95%" })
                                    @Html.ValidationMessageFor(model => model.PartNumber)
                                }
                                else
                                {
                                    <span style="white-space: pre-wrap">@Html.ValueFor(model => model.PartNumber)</span>
                                    @Html.HiddenFor(model => model.PartNumber)
                                }
                            </td>
                        </tr>
                    </table>
                    <table class="jtable" style="table-layout: fixed;">
                        <tr>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.PCBVendorName)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.PCBVendor_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.DropDownListFor(model => model.PCBVerdorID, (SelectList)ViewData["PCBVendor"])
                                    @Html.ValidationMessageFor(model => model.PCBVerdorID)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.PCBVerdorID)
                                    @Html.ValueFor(model => model.PCBVendorName)
                                }
                            </td>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.ProductStageName)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.ProductStage_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.DropDownListFor(model => model.ProductStageID, (SelectList)ViewData["ProductStage"])
                                    @Html.ValidationMessageFor(model => model.ProductStageID)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.ProductStageID)
                                    @Html.ValueFor(model => model.ProductStageName)
                                }
                            </td>
                        </tr>
                    </table>
                </div>
                <div id="EFA" style="display: @Method.GetDisplay(Html.ValueFor(model => model.DivEFA_Visible).ToString())">
                    <table class="jtable" style="table-layout: fixed;">
                        <tr>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.ReturnType)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.ReturnType_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.DropDownListFor(model => model.ReturnType, (SelectList)ViewData["ReturnTypeList"])
                                    @Html.ValidationMessageFor(model => model.ReturnType)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.ReturnType)
                                    @Html.ValueFor(model => model.ReturnTypeName)
                                }
                            </td>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.FailureSite)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.FailureSite_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.DropDownListFor(model => model.FailureSite, (SelectList)ViewData["FailureSiteList"])
                                    @Html.ValidationMessageFor(model => model.FailureSite)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.FailureSite)
                                    @Html.ValueFor(model => model.FailureSiteName)
                                }
                            </td>
                        </tr>
                    </table>
                </div>
                <div id="Source" style="display: @Method.GetDisplay(Html.ValueFor(model => model.IssueSource_Visible).ToString())">
                    <table class="jtable" style="table-layout: fixed;">
                        <tr>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.IssueSource)
                            </th>
                            <td class="editor-field" width="85%">
                                @if (Html.ValueFor(model => model.IssueSource_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.DropDownListFor(model => model.IssueSource, (SelectList)ViewData["IssueSourceList"])
                                    @Html.ValidationMessageFor(model => model.IssueSource)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.IssueSource)
                                    @Html.ValueFor(model => model.IssueSourceName)
                                }
                            </td>
                    </table>
                </div>
                <div id="FA" style="display: @Method.GetDisplay(Html.ValueFor(model => model.DivFA_Visible).ToString())">
                    <table class="jtable" style="table-layout: fixed; display: @Method.GetDisplay(Html.ValueFor(model => model.SampleQty_Visible).ToString())">
                        <tr>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.SampleQty)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.SampleQty_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.EditorFor(model => model.SampleQty)
                                    @Html.ValidationMessageFor(model => model.SampleQty)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.SampleQty)
                                    @Html.ValueFor(model => model.SampleQty)
                                }
                            </td>
                            <td width="50%" colspan="2"></td>
                        </tr>
                    </table>
                </div>
                <div id="Descr" style="display: @Method.GetDisplay(Html.ValueFor(model => model.BackgroundDesc_Visible).ToString())">
                    <table class="jtable" style="table-layout: fixed;">
                        <tr>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.BackgroundDesc)
                            </th>
                            <td class="editor-field" width="85%">
                                @if (Html.ValueFor(model => model.BackgroundDesc_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.TextAreaFor(model => model.BackgroundDesc, new { cols = 10, @rows = 3, style = "width: 95%" })
                                    @Html.ValidationMessageFor(model => model.BackgroundDesc)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.BackgroundDesc)
                                    <span style="white-space: pre-wrap">@Html.ValueFor(model => model.BackgroundDesc)</span>
                                }
                            </td>
                        </tr>
                    </table>
                </div>
                <div id="DivUserAttachFile">
                    <table class="jtable" style="table-layout: fixed;">
                        <tr>
                            <th class="editor-label" width="15%">
                                User Files
                            </th>
                            <td class="editor-field" width="85%">
                                @if (ViewData["attFile10"] != null)
                                {
                                    if (Model.State.Value == 10 || Model.State.Value == 18)
                                    {
                                        @Html.Partial(PartialAttachFileEdit, ViewData["attFile10"])
                                    }
                                    else
                                    {
                                        @Html.Partial(PartialAttachFile, ViewData["attFile10"])
                                    }
                                }
                            </td>
                        </tr>
                    </table>
                </div>
                <div id="Strain" style="display: @Method.GetDisplay(Html.ValueFor(model => model.DivStrain_Visible).ToString())">
                    <table class="jtable" style="table-layout: fixed;">
                        <tr>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.TestPurpose)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.TestPurpose_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.DropDownListFor(model => model.TestPurpose, (SelectList)ViewData["TestPurposeList"])
                                    @Html.ValidationMessageFor(model => model.TestPurpose)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.TestPurpose)
                                    @Html.ValueFor(model => model.TestPurposeName)
                                }
                            </td>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.ProductStage)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.TestPurpose_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.EditorFor(model => model.ProductStage)
                                    @Html.ValidationMessageFor(model => model.ProductStage)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.ProductStage)
                                    @Html.ValueFor(model => model.ProductStage)
                                }
                            </td>
                        </tr>
                        <tr>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.ProcessStep)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.ProcessStep_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.DropDownListFor(model => model.ProcessStep, (SelectList)ViewData["ProcessStepList"])
                                    @Html.ValidationMessageFor(model => model.ProcessStep)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.ProcessStep)
                                    @Html.ValueFor(model => model.ProcessStepName)
                                }

                            </td>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.FixtureNo)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.FixtureNo_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.EditorFor(model => model.FixtureNo)
                                    @Html.ValidationMessageFor(model => model.FixtureNo)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.FixtureNo)
                                    @Html.ValueFor(model => model.FixtureNo)
                                }
                            </td>
                        </tr>
                        <tr>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.FixtureVersionNo)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.FixtureVersionNo_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.EditorFor(model => model.FixtureVersionNo)
                                    @Html.ValidationMessageFor(model => model.FixtureVersionNo)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.FixtureVersionNo)
                                    @Html.ValueFor(model => model.FixtureVersionNo)
                                }
                            </td>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.FixtureSupplier)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.FixtureSupplier_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.EditorFor(model => model.FixtureSupplier)
                                    @Html.ValidationMessageFor(model => model.FixtureSupplier)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.FixtureSupplier)
                                    @Html.ValueFor(model => model.FixtureSupplier)
                                }
                            </td>
                        </tr>

                    </table>
                </div>
                <br />
                <div id="DivLAB">
                    <table class="jtable" style="table-layout: fixed;">
                        <tr>
                            <th class="display-label">
                                <label>LAB人員填寫：</label>
                            </th>
                        </tr>
                    </table>
                    <table class="jtable" style="table-layout: fixed; display: @Method.GetDisplay(Html.ValueFor(model => model.LocalSupervisor_Visible).ToString())">
                        <tr>
                            <th class="editor-label" width="15%" style="display: @Method.GetDisplay(Html.ValueFor(model => model.LocalSupervisor_Visible).ToString())">
                                @Html.LabelFor(model => model.LocalSupervisor)
                            </th>
                            <td class="editor-field" width="35%" style="display: @Method.GetDisplay(Html.ValueFor(model => model.LocalSupervisor_Visible).ToString())">
                                @if (Html.ValueFor(model => model.LocalSupervisor_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.DropDownListFor(model => model.LocalSupervisor, (SelectList)ViewData["LocalSupervisorList"])
                                    @Html.ValidationMessageFor(model => model.LocalSupervisor)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.LocalSupervisor)
                                    @Html.ValueFor(model => model.LocalSupervisorName)
                                }
                            </td>
                            <th class="editor-label" width="15%" style="display: @Method.GetDisplay(Html.ValueFor(model => model.LabMember_Visible).ToString())">
                                @Html.LabelFor(model => model.LabMember)
                            </th>
                            <td class="editor-field" width="35%" style="display: @Method.GetDisplay(Html.ValueFor(model => model.LabMember_Visible).ToString())">
                                @if (Html.ValueFor(model => model.LabMember_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.DropDownListFor(model => model.LabMember, (SelectList)ViewData["LabMemberList"])
                                    @Html.ValidationMessageFor(model => model.LabMember)
                                    <label class="FieldNotValid">@(Session["ValidLabMember"] == null ? "" : Session["ValidLabMember"])</label>
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.LabMember)
                                    @Html.ValueFor(model => model.LabMemberName)
                                }
                            </td>
                        </tr>
                    </table>
                    <table class="jtable" style="table-layout: fixed; display: @Method.GetDisplay(Html.ValueFor(model => model.ReceiptQty_Visible).ToString())">
                        <tr>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.ReceiptQty)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.ReceiptQty_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.EditorFor(model => model.ReceiptQty)
                                    @Html.ValidationMessageFor(model => model.ReceiptQty)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.ReceiptQty)
                                    @Html.ValueFor(model => model.ReceiptQty)
                                }
                            </td>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.LabWorkHour)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.LabWorkHour_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.EditorFor(model => model.LabWorkHour)
                                    @Html.ValidationMessageFor(model => model.LabWorkHour)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.LabWorkHour)
                                    @Html.ValueFor(model => model.LabWorkHour)
                                }
                            </td>
                        </tr>
                        <tr>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.ReceiptDate)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.ReceiptDate_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.EditorFor(model => model.ReceiptDate)
                                    @Html.ValidationMessageFor(model => model.ReceiptDate)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.ReceiptDate)
                                    @Html.DisplayFor(model => model.ReceiptDate)
                                }
                            </td>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.FinishDate)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.FinishDate_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.EditorFor(model => model.FinishDate)
                                    @Html.ValidationMessageFor(model => model.FinishDate)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.FinishDate)
                                    @Html.DisplayFor(model => model.FinishDate)
                                }
                            </td>
                        </tr>
                        <tr>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.AnalysisResult)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.AnalysisResult_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.TextAreaFor(model => model.AnalysisResult, new { cols = 10, @rows = 3, style = "width: 95%" })
                                    @Html.ValidationMessageFor(model => model.AnalysisResult)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.AnalysisResult)
                                    <span style="white-space: pre-wrap">@Html.ValueFor(model => model.AnalysisResult)</span>
                                }
                            </td>
                            <th class="editor-label" width="15%">
                                LAB Member Files
                            </th>
                            <td class="editor-field" width="35%">
                                @if (ViewData["attFile35"] != null)
                                {
                                    if (Model.State.Value == 35)
                                    {
                                        @Html.Partial(PartialAttachFileEdit, ViewData["attFile35"])
                                    }
                                    else
                                    {
                                        @Html.Partial(PartialAttachFile, ViewData["attFile35"])
                                    }
                                }
                            </td>
                        </tr>
                    </table>
                    <div id="StrainNextTestDate" style="display: @Method.GetDisplay(Html.ValueFor(model => model.DivStrain_Visible).ToString())">
                        <table class="jtable" style="table-layout: fixed;">
                            <tr>
                                <th class=" editor-label" width="15%">
                                    @Html.LabelFor(model => model.NextTestDate)
                                </th>
                                <td class="editor-field" width="35%">
                                    @if (Html.ValueFor(model => model.NextTestDate_Enable).ToString().ToUpper() == "TRUE")
                                    {
                                        @Html.EditorFor(model => model.NextTestDate)
                                        @Html.ValidationMessageFor(model => model.NextTestDate)
                                    }
                                    else
                                    {
                                        @Html.HiddenFor(model => model.NextTestDate)
                                        @Html.DisplayFor(model => model.NextTestDate)
                                    }
                                </td>
                                <td width="15%"></td>
                                <td width="35%"></td>
                            </tr>
                        </table>
                    </div>
                    <table class="jtable" style="table-layout: fixed; display: @Method.GetDisplay(Html.ValueFor(model => model.AnalysisSummary_Visible).ToString())">
                        <tr>
                            <th class="editor-label" width="15%">
                                @Html.LabelFor(model => model.AnalysisSummary)
                            </th>
                            <td class="editor-field" width="35%">
                                @if (Html.ValueFor(model => model.AnalysisSummary_Enable).ToString().ToUpper() == "TRUE")
                                {
                                    @Html.TextAreaFor(model => model.AnalysisSummary, new { cols = 10, @rows = 3, style = "width: 95%" })
                                    @Html.ValidationMessageFor(model => model.AnalysisSummary)
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.AnalysisSummary)
                                    @Html.ValueFor(model => model.AnalysisSummary)
                                }
                            </td>
                            <th class="editor-label" width="15%">
                                Supervisor Files
                            </th>
                            <td class="editor-field" width="35%">
                                @if (ViewData["attFile40"] != null)
                                {
                                    if (Model.State.Value == 40)
                                    {
                                        @Html.Partial(PartialAttachFileEdit, ViewData["attFile40"])
                                    }
                                    else
                                    {
                                        @Html.Partial(PartialAttachFile, ViewData["attFile40"])
                                    }
                                }

                                @if (ViewData["attFile1000"] != null)
                                {
                                    if (Model.State.Value == 1000)
                                    {
                                        @Html.Partial(PartialAttachFileEdit, ViewData["attFile1000"])
                                    }
                                    else
                                    {
                                        @Html.Partial(PartialAttachFile, ViewData["attFile1000"])
                                    }
                                }
                            </td>
                        </tr>
                    </table>
                    @if (ViewData["attFile1000"] != null && Html.ValueFor(model => model.AttachFile1000_Visible).ToString().ToUpper() == "TRUE")
                    {
                        <table class="jtable" style="table-layout: fixed;">
                            <tr>
                                <th class=" editor-label" width="15%">
                                    @Html.LabelFor(model => model.Comment)
                                </th>
                                <td class="editor-field" width="35%">
                                    @Html.TextAreaFor(model => model.Comment, new { cols = 10, @rows = 3, style = "width: 95%" })
                                    @Html.ValidationMessageFor(model => model.Comment)
                                </td>
                                <th class="editor-label" width="15%">
                                    Virtual Test Report
                                </th>
                                <td class="editor-field" width="35%">
                                    @Html.Partial(PartialAttachFileEdit, ViewData["attFile1000"])
                                </td>
                            </tr>
                        </table>
                    }
                </div>
                <br />
                <div id="DivFileUpload">
                    <table class="jtable" style="table-layout: fixed; display: @Method.GetDisplay(Html.ValueFor(model => model.DivFileUpload_Visible).ToString())">
                        <tr>
                            <th class="editor-label" width="15%">
                                File Upload
                            </th>
                            <td class="editor-field" width="85%">
                                <input id="uploadfile" name="uploadfile[]" class="multi" type="file" multiple="multiple" />
                                <input id="upfileAction" name="upfileAction" type="button" value="Upload" onclick="document.getElementById('Action').value = 'D'; document.getElementById('fcerl').submit();" />
                            </td>
                        </tr>
                    </table>
                </div>
            </fieldset>
        </div>
        <div id="tabs-2">
            <table class="jtable">
                @if (Html.ValueFor(model => model.DivFileUpdateVer_Visible).ToString().ToUpper() == "TRUE")
                {
                    <tr>
                        <td>
                            @if (ViewData["CCUser"] != null)
                            {
                                @Html.Partial(PartialCCUserEdit, ViewData["CCUser"])
                            }
                        </td>
                    </tr>
                }
                <tr>
                    <td class="editor-field">
                        @Html.TextAreaFor(model => model.Comment, new { cols = 35, @rows = 10, style = "width: 98%" })
                        @Html.ValidationMessageFor(model => model.Comment)
                    </td>
                </tr>
            </table>
        </div>
    }

    <div id="tabs-3">
        @if (ViewData["vTaskDetail"] != null)
        {
            @Html.Partial(PartialTaskDetail, ViewData["vTaskDetail"])
        }
    </div>
</div>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
